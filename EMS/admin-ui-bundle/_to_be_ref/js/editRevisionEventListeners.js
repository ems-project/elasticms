function editRevisionEventListeners(target, onChangeCallback = null){

    target.find(".ckeditor_ems").each(function(){
        ckconfig.div_wrapTable = 'true';

        CKEDITOR.on('instanceReady', (event) => {
            let editor = event.editor;
            let emsTranslations = ckconfig?.ems?.translations;

            if (typeof emsTranslations === 'undefined' || !emsTranslations.hasOwnProperty(editor.langCode)) return;
            let emsTranslationsLang = emsTranslations[editor.langCode];
            let ckeditorSections = [
                ...Object.getOwnPropertyNames(editor.lang),
                ...Object.getOwnPropertyNames(Object.getPrototypeOf(editor.lang))
            ];

            ckeditorSections.forEach((section) => {
                Object.entries(emsTranslationsLang).forEach(([key, value]) => {
                    const splitKey = key.split('.');
                    if (section !== splitKey[0]) return;
                    if (editor.lang[section].hasOwnProperty(splitKey[1])) {
                        editor.lang[section][splitKey[1]] = value;
                    }
                });
            });
        });


        //Set defaults that are compatible with bootstrap for html generated by CKEDITOR (e.g. tables)
        CKEDITOR.on( 'dialogDefinition', function( ev )
        {
            // Take the dialog name and its definition from the event data.
            const dialogName = ev.data.name;
            const dialogDefinition = ev.data.definition;

            // Check if the definition is from the dialog we're interested in (the "Table" dialog).
            if ( dialogName === 'table' )
            {
                // Get a reference to the "Table Info" tab.
                const infoTab = dialogDefinition.getContents( 'info' );

                const txtBorder = infoTab.get( 'txtBorder');
                txtBorder['default'] = 0;
                const txtCellPad = infoTab.get( 'txtCellPad');
                txtCellPad['default'] = "";
                const txtCellSpace = infoTab.get( 'txtCellSpace');
                txtCellSpace['default'] = "";
                const txtWidth = infoTab.get( 'txtWidth' );
                txtWidth['default'] = "";
            }
        });
    });
}

export {editRevisionEventListeners};
