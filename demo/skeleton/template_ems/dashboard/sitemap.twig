{%  block ems_body %}

    {% set locales = app.request.server.all['EMSCH_LOCALES']|default('[]')|ems_json_decode %}
    {% if app.user.localePreferred|default(null) and app.user.localePreferred in locales %}
        {% set locales = [app.user.localePreferred]|merge(locales)|reduce((carry,p) => p in carry ? carry : carry|merge([p]), []) %}
    {% endif %}

    {%  set locale = app.request.query.get('locale', locales|first) %}

    {% if app.request.query.get('open-modal', false)  %}
        //TODO
    {%  else %}
        {% set sections = emsch_search('section', {
            "sort": {
                "order": {
                    "order": "asc",
                    "missing": "_last",
                    "unmapped_type": "long",
                },
            },
            "size": 100,
            "_source": ['label', 'structure']
        }).hits.hits %}

        <div class="nav-tabs-custom">
            <ul class="nav nav-tabs">
                {% for l in locales %}
                    <li class="{% if l == locale %}active{% endif %}">
                        <a href="{{ path(app.request.attributes.get('_route'),
                            app.request.attributes.get('_route_params')|merge({locale: l})) }}">{{ "locale.#{l}"|i18n }}</a>
                    </li>
                {% endfor %}
            </ul>
        </div>

        {% for section in sections %}
            <h2 class="h3">{{ section._source.label }}</h2>
            {% set environments = ['preview','live'] %}
            {{ component('json_menu_nested', {
                'id': "section-#{section._id}",
                'ems_link': "ems://object:#{section._source._contenttype}:#{section._id}",
                'field_path': '[structure]',
                'template': _self,
                'context': {
                    'locale': locale,
                    'current_path': path(app.request.attributes.get('_route'),
                        app.request.attributes.get('_route_params')|merge({action: 'create'})),
                    'environments': environments,
                    'contentTypes': ['page']
                },
                'columns': [
                    { 'name': 'content', 'width': 250 },
                    { 'name': 'status', 'width': 20 + (80 * environments|length) },
                    { 'name': 'structure' },
                ],
            }) }}
        {% endfor %}
    {% endif %}
{%  endblock ems_body %}

{%- block jmn_menu_add -%}
    <ul class="dropdown-menu pull-right">
        <li>
            <button class="ems-add-existing-page" data-modal-size="md">
                <i class="fa fa-sign-in"></i>
                Existing content
            </button>
        </li>
        {% for addNode in addNodes %}
            <li>{{ template.block('jmn_button_item_add', _context)|raw }}</li>
        {% endfor %}
    </ul>
{%- endblock jmn_menu_add -%}

{%- block jmn_cell_title -%}
    {% if item.hasChildren %}
        <button class="jmn-item-icon jmn-btn-collapse" aria-expanded="{{- item in loadParents ? 'true' : 'false' -}}"></button>
    {% endif %}
    {% if node.icon %}
        <div class="jmn-item-icon"><i class="{{ node.icon }}"></i></div>
    {% endif %}

    {% if attribute(item.object, locale)|default(false) and attribute(item.object, locale).title|default(false) %}
        <span>{{ attribute(item.object, locale).title }}</span>
    {% else %}
        <span class="text-gray">{{ item.label }}</span>
    {% endif %}
{%- endblock jmn_cell_title -%}

{% block jmn_column_content %}Content{% endblock %}

{% block jmn_cell_content %}
        {% set content = emsch_search(config.context.contentTypes, {
            "query": {
                "terms": {"menu": [item.id]}
            },
            "size": 2,
        }).hits.hits %}
        {% if content|length == 0 %}
            <div class="btn-group">
                <button data-id="{{ item.id }}" class="json-post-button btn btn-sm btn-warning new-button" data-object="{{ item.object|json_encode|e('html_attr') }}" data-type="{{ item.type|e('html_attr') }}" data-label="{{ item.label|e('html_attr') }}" id="new-btn-{{ item.id|e('html_attr') }}">
                    <i class="fa fa-plus"></i>
                    New {{ item.type }}
                </button>
                <button class="btn btn-sm btn-warning attach-content" data-item-id="{{ item.id }}" data-item-type="{{ item.type }}">
                    <i class="fa fa-sign-in"></i>
                    Existing content
                </button>
            </div>
        {% elseif content|length == 1 %}
            {% set info = "#{content.0._source._contenttype}:#{content.0._id}"|emsco_document_info %}
            {% set contentType = content.0._source._contenttype|get_content_type %}
            {% set ouuid = content.0._id %}
            {% set environment = 'preview'|get_environment %}
            <div class="btn-toolbar" role="toolbar" style="margin: 0;">
                <div class="btn-group">
                    {% include '@EMSCore/elements/object-views-button.html.twig' with {
                        ouuid:  ouuid,
                        contentType: contentType,
                        environment: environment,
                        recursiveView: false,
                        object: content.0,
                    }%}
                    {% if info and  is_granted(contentType.roles.edit) %}
                            {% if not  contentType.circlesField or attribute(source, contentType.circlesField) is not defined or attribute(source, contentType.circlesField)|in_my_circles %}
                                {% include '@EMSCore/elements/post-button.html.twig' with {
                                    'url': path('revision.new-draft', {'ouuid': ouuid, 'type': contentType.name}),
                                    'label': 'Edit',
                                    'icon': 'pencil' }%}
                            {% endif %}
                    {% endif %}
                </div>
            </div>
        {% else %}
            <div class="col-xs-12 text-center">
                Error: multiple pages are attached to this item
            </div>
        {% endif %}
{% endblock %}

{% block jmn_column_status %}
    <div>
        <div class="col-xs-12">Publication status</div>
        {% for env in config.context.environments %}
            <div style="width: 80px;float: left">{{ env|get_environment.label }}</div>
        {% endfor %}
    </div>
{% endblock %}

{% block jmn_cell_status %}
    {% set content = emsch_search(config.context.contentTypes, {
        "query": {
            "terms": {"menu": [item.id]}
        },
        "size": 2,
        "_source": ['label']
    }).hits.hits %}
    {% if content|length == 1 %}
        {% set info = "#{content.0._source._contenttype}:#{content.0._id}"|emsco_document_info %}
        <div class="">
            {%  for env in config.context.environments %}
                <div style="width: 80px;float: left; padding-left: 4px; padding-right: 4px">
                    {% if info.defaultEnvironment.name == env %}
                        {% if info.hasDraft %}
                            <span class="label label-warning col-sm-12">Draft</span>
                        {% else %}
                            <span class="label label-success col-sm-12">Published</span>
                        {% endif %}
                    {% else %}
                        {% if info.aligned(env) %}
                            <span class="label label-success col-sm-12">Published</span>
                        {% elseif info.published(env) %}
                            <span class="label label-warning col-sm-12">Outdated</span>
                        {% else %}
                            <span class="label label-default col-sm-12">Unavailable</span>
                        {% endif %}
                    {% endif %}
                </div>
            {% endfor %}
        </div>
    {% endif %}
{% endblock %}

{%  block ems_footer %}
    <script>
        var keepLoading = false;
        function newPage(contentType, menu, object)
        {
            var xhr = new XMLHttpRequest();
            var url = '{{ path('emsco_interface_document_create', { interface: 'json', name: '__contentType__' })|e('js') }}'.replace('__contentType__', contentType);
            var redirect = '{{ path('emsco_edit_revision', {revisionId: '__revisionId__' })|e('js') }}';
            xhr.open("POST", url, true);
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    var json = JSON.parse(xhr.responseText);
                    document.location = redirect.replace('__revisionId__', json.revision_id);
                }
            };
            var data = Object.assign({}, object);
            data.menu = menu;
            xhr.send(JSON.stringify(data));
        }

        function newBtnClick()
        {
            newPage(this.dataset.type, this.dataset.id, JSON.parse(this.dataset.object));
        }

        function jmnAdd(event)
        {
            keepLoading = true;
            setTimeout(function () {
                newPage(event.detail.data.type, event.detail.data.item, event.detail.data.object);
            }, 3000);
        }

        function jmnLoad(event)
        {
            if (keepLoading) {
                event.detail.jnm.loading(true);
            }
            for(var i = 0; i < event.detail.elements.length; i++) {
                (function(index) {
                    var newButton = event.detail.elements[index].getElementsByClassName('new-button');
                    for(var i = 0; i < newButton.length; i++) {
                        (function(index) {
                            newButton[index].addEventListener("click", newBtnClick)
                        })(i);
                    }
                })(i);
            }
        }

        var jvmTrees = document.getElementsByClassName('json-menu-nested-component');
        for(var i = 0; i < jvmTrees.length; i++) {
            (function(index) {
                jvmTrees[index].addEventListener("jmn-load", jmnLoad)
                jvmTrees[index].addEventListener("jmn-add", jmnAdd)
            })(i);
        }
    </script>
{%  endblock ems_footer %}
