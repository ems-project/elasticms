{%  block ems_body %}
    {% set route = app.request.attributes.get('_route') %}
    {% set routeParams = app.request.attributes.get('_route_params') %}

    {% set locales = app.request.server.all['EMSCH_LOCALES']|default('[]')|ems_json_decode %}
    {% if app.user.localePreferred|default(null) and app.user.localePreferred in locales %}
        {% set locales = [app.user.localePreferred]|merge(locales)|reduce((carry,p) => p in carry ? carry : carry|merge([p]), []) %}
    {% endif %}
    {%  set locale = app.request.query.get('locale', locales|first) %}

    {% set sections = {
        "index": 'preview'|emsco_get_environment.alias,
        "size": 10,
        "body": {
            "_source": ['label', 'structure'],
            "query": {"term": { "_contenttype": {"value":"section"} } },
            "sort": { "order": { "order": "asc", "missing": "_last", "unmapped_type": "long" } }
        }
    }|search.hits.hits %}
    <div class="nav-tabs-custom">
        <ul class="nav nav-tabs">
            {% for l in locales %}
                <li class="{{ html_classes({ 'active': l == locale }) }}">
                    <a href="{{ path(route, routeParams|merge({ 'locale': l }) ) }}">{{ "locale.#{l}"|i18n }}</a>
                </li>
            {% endfor %}
        </ul>
       <div class="tab-content">
            <div class="tab-pane p-2 active" id="tab-{{ locale }}">
                {% for section in sections %}
                    {{ component('json_menu_nested', {
                        'id': "section-#{section._id}",
                        'ems_link': "ems://object:#{section._source._contenttype}:#{section._id}",
                        'field_path': '[structure]',
                        'template': '@EMSCH/template_ems/dashboard/json_menu_nested.twig',
                        'context_block': 'build_context',
                        'context': {
                            'sectionLabel': section._source.label,
                            'locale': locale
                        },
                        'columns': [
                            { 'name': 'content', 'width': 150 },
                            { 'name': 'status', 'width': 200 },
                            { 'name': 'structure' },
                        ],
                    }) }}
                {% endfor %}
            </div>
        </div>
    </div>
{%  endblock ems_body %}

{% block ems_header %}
    <style>
        .jmn-column-status { flex-wrap: wrap; }
        .jmn-column-status > div:first-child { width: 100%; padding-bottom: 10px; }
        .jmn-column-status > div:not(:first-child) { flex: 1; }
    </style>
{% endblock ems_header %}

{%  block ems_footer %}
    <script>
        window.addEventListener('emsReady', function () {
            Object.values(window.jsonMenuNestedComponents).forEach((jmn) => {
                jmn.element.addEventListener('jmn-add', (event) => onJmnAdd(jmn, event));
                jmn.element.addEventListener('jmn-load', (event) => onJmnLoad(jmn, event));
            });
        });

        function onJmnLoad(jmn, event) {
            event.preventDefault();
            jmn.element.querySelectorAll('.btn-new-page').forEach((button) => {
                button.addEventListener('click', () => onClickNewPage(jmn, button));
            });
            jmn.element.querySelectorAll('.btn-detach-page').forEach((button) => {
                button.addEventListener('click', () => onClickDetachPage(jmn, button));
            });
            jmn.loading(false);
        }

        function onJmnAdd(jmn, event) {
            event.preventDefault();
            jmn.loading(true);
            let item = event.detail.data.item;
            createPage(item).then(() => jmn.load({ activeItemId: item.id }));
        }
        function onClickNewPage(jmn, button) {
            let item = JSON.parse(button.dataset.item);
            createPage(item).then(() => jmn.load({ activeItemId: item.id }));
        }
        function onClickDetachPage(jmn, button) {
            let itemId = button.dataset.itemId;
            let pageId = button.dataset.pageId;

            jmn.loading(true);
            post(`/json/data/page/update/${pageId}?` + new URLSearchParams({ refresh: 1}), {
                menu: null
            }).then((json) => {
                if (json.hasOwnProperty('success') || json.success) jmn.load({ activeItemId: itemId });
            });
        }

        async function createPage(item) {
            return post('/json/data/page/index?' + new URLSearchParams({ refresh: 1}), {
                label: item.label,
                menu: item.id,
                nl: {title: item.object.nl.title},
                fr: {title: item.object.fr.title},
            });
        }
        async function post(url, data) {
            let response = await fetch(url, {
                method: "POST",
                headers: { 'Content-Type': 'application/json', 'X-Flash-Messages': 'false'},
                body: JSON.stringify(data)
            });
            return response.json();
        }
    </script>
{%  endblock ems_footer %}
