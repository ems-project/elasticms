{%  block ems_body %}
    {% set route = app.request.attributes.get('_route') %}
    {% set routeParams = app.request.attributes.get('_route_params') %}

    {% set locales = app.request.server.all['EMSCH_LOCALES']|default('[]')|ems_json_decode %}
    {% if app.user.localePreferred|default(null) and app.user.localePreferred in locales %}
        {% set locales = [app.user.localePreferred]|merge(locales)|reduce((carry,p) => p in carry ? carry : carry|merge([p]), []) %}
    {% endif %}
    {%  set locale = app.request.query.get('locale', locales|first) %}

    {% set sections = {
        "index": 'preview'|emsco_get_environment.alias,
        "size": 10,
        "body": {
            "_source": ['label', 'structure'],
            "query": {"term": { "_contenttype": {"value":"section"} } },
            "sort": { "order": { "order": "asc", "missing": "_last", "unmapped_type": "long" } }
        }
    }|search.hits.hits %}
    <div class="nav-tabs-custom">
        <ul class="nav nav-tabs">
            {% for l in locales %}
                <li class="{{ html_classes({ 'active': l == locale }) }}">
                    <a href="{{ path(route, routeParams|merge({ 'locale': l }) ) }}">{{ "locale.#{l}"|i18n }}</a>
                </li>
            {% endfor %}
        </ul>
       <div class="tab-content">
            <div class="tab-pane p-2 active" id="tab-{{ locale }}">
                {% for section in sections %}
                    {{ component('json_menu_nested', {
                        'id': "section-#{section._id}",
                        'ems_link': "ems://object:#{section._source._contenttype}:#{section._id}",
                        'field_path': '[structure]',
                        'template': '@EMSCH/template_ems/dashboard/json_menu_nested.twig',
                        'context_block': 'build_context',
                        'context': {
                            'sectionLabel': section._source.label,
                            'locale': locale
                        },
                        'columns': [
                            { 'name': 'content', 'width': 150 },
                            { 'name': 'status', 'width': 200 },
                            { 'name': 'structure' },
                        ],
                    }) }}
                {% endfor %}
            </div>
        </div>
    </div>
{%  endblock ems_body %}

{% block ems_header %}
    <style>
        .jmn-column-status { flex-wrap: wrap; }
        .jmn-column-status > div:first-child { width: 100%; padding-bottom: 10px; }
        .jmn-column-status > div:not(:first-child) { flex: 1; }
    </style>
{% endblock ems_header %}

{%  block ems_footer %}
    <script>
        var keepLoading = false;
        function newPage(contentType, menu, object)
        {
            var xhr = new XMLHttpRequest();
            var url = '{{ path('emsco_interface_document_create', { interface: 'json', name: '__contentType__' })|e('js') }}'.replace('__contentType__', contentType);
            var redirect = '{{ path('emsco_edit_revision', {revisionId: '__revisionId__' })|e('js') }}';
            xhr.open("POST", url, true);
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    var json = JSON.parse(xhr.responseText);
                    document.location = redirect.replace('__revisionId__', json.revision_id);
                }
            };
            var data = Object.assign({}, object);
            data.menu = menu;
            xhr.send(JSON.stringify(data));
        }

        function newBtnClick()
        {
            newPage(this.dataset.type, this.dataset.id, JSON.parse(this.dataset.object));
        }

        function jmnAdd(event)
        {
            keepLoading = true;
            setTimeout(function () {
                newPage(event.detail.data.type, event.detail.data.item, event.detail.data.object);
            }, 3000);
        }

        function jmnLoad(event)
        {
            if (keepLoading) {
                event.detail.jnm.loading(true);
            }
            for(var i = 0; i < event.detail.elements.length; i++) {
                (function(index) {
                    var newButton = event.detail.elements[index].getElementsByClassName('new-button');
                    for(var i = 0; i < newButton.length; i++) {
                        (function(index) {
                            newButton[index].addEventListener("click", newBtnClick)
                        })(i);
                    }
                })(i);
            }
        }

        var jvmTrees = document.getElementsByClassName('json-menu-nested-component');
        for(var i = 0; i < jvmTrees.length; i++) {
            (function(index) {
                jvmTrees[index].addEventListener("jmn-load", jmnLoad)
                jvmTrees[index].addEventListener("jmn-add", jmnAdd)
            })(i);
        }
    </script>
{%  endblock ems_footer %}
