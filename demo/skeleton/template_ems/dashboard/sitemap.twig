{%  block ems_body %}
    {% set locales = app.request.server.all['EMSCH_LOCALES']|default('[]')|ems_json_decode %}
    {% if app.user.localePreferred|default(null) and app.user.localePreferred in locales %}
        {% set locales = [app.user.localePreferred]|merge(locales)|reduce((carry,p) => p in carry ? carry : carry|merge([p]), []) %}
    {% endif %}
    {%  set locale = app.request.query.get('locale', locales|first) %}

    {% set sections = emsch_search('section', {
        "_source": ['label', 'structure'],
        "size": 100,
        "sort": { "order": { "order": "asc", "missing": "_last", "unmapped_type": "long" } }
    }).hits.hits %}

    <div class="nav-tabs-custom">
        <ul class="nav nav-tabs">
            {% for l in locales %}
                <li class="{{ html_classes({ 'active': l == locale }) }}">
                    <a href="{{ path(app.request.attributes.get('_route'),
                        app.request.attributes.get('_route_params')|merge({locale: l})) }}">{{ "locale.#{l}"|i18n }}</a>
                </li>
            {% endfor %}
        </ul>
       <div class="tab-content">
            {% for l in locales %}
                <div class="{{ html_classes('tab-pane', { 'active': l == locale }) }}" id="tab-{{ l}}">
                    {% for section in sections %}
                        <h2 class="h3">{{ section._source.label }}</h2>
                        {% set environments = ['preview','live'] %}
                        {{ component('json_menu_nested', {
                            'id': "section-#{section._id}",
                            'ems_link': "ems://object:#{section._source._contenttype}:#{section._id}",
                            'field_path': '[structure]',
                            'template': '@EMSCH/template_ems/dashboard/json_menu_nested.twig',
                            'context': {
                                'locale': locale,
                                'current_path': path(app.request.attributes.get('_route'),
                                    app.request.attributes.get('_route_params')|merge({action: 'create'})),
                                'environments': environments,
                                'contentTypes': ['page']
                            },
                            'columns': [
                                { 'name': 'content', 'width': 250 },
                                { 'name': 'status', 'width': 20 + (80 * environments|length) },
                                { 'name': 'structure' },
                            ],
                        }) }}
                    {% endfor %}
                </div>
            {% endfor %}
        </div>
    </div>
{%  endblock ems_body %}

{%  block ems_footer %}
    <script>
        var keepLoading = false;
        function newPage(contentType, menu, object)
        {
            var xhr = new XMLHttpRequest();
            var url = '{{ path('emsco_interface_document_create', { interface: 'json', name: '__contentType__' })|e('js') }}'.replace('__contentType__', contentType);
            var redirect = '{{ path('emsco_edit_revision', {revisionId: '__revisionId__' })|e('js') }}';
            xhr.open("POST", url, true);
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    var json = JSON.parse(xhr.responseText);
                    document.location = redirect.replace('__revisionId__', json.revision_id);
                }
            };
            var data = Object.assign({}, object);
            data.menu = menu;
            xhr.send(JSON.stringify(data));
        }

        function newBtnClick()
        {
            newPage(this.dataset.type, this.dataset.id, JSON.parse(this.dataset.object));
        }

        function jmnAdd(event)
        {
            keepLoading = true;
            setTimeout(function () {
                newPage(event.detail.data.type, event.detail.data.item, event.detail.data.object);
            }, 3000);
        }

        function jmnLoad(event)
        {
            if (keepLoading) {
                event.detail.jnm.loading(true);
            }
            for(var i = 0; i < event.detail.elements.length; i++) {
                (function(index) {
                    var newButton = event.detail.elements[index].getElementsByClassName('new-button');
                    for(var i = 0; i < newButton.length; i++) {
                        (function(index) {
                            newButton[index].addEventListener("click", newBtnClick)
                        })(i);
                    }
                })(i);
            }
        }

        var jvmTrees = document.getElementsByClassName('json-menu-nested-component');
        for(var i = 0; i < jvmTrees.length; i++) {
            (function(index) {
                jvmTrees[index].addEventListener("jmn-load", jmnLoad)
                jvmTrees[index].addEventListener("jmn-add", jmnAdd)
            })(i);
        }
    </script>
{%  endblock ems_footer %}
